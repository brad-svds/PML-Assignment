{"name":"Pml-assignment","tagline":"Assignment for Coursera Course","body":"---\r\ntitle: \"Practical Machine Lerning - Fitness Data\"\r\nauthor: \"Brad Allen\"\r\ndate: \"February 12, 2016\"\r\noutput: html_document\r\n---\r\n\r\n# Executive Summary\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. \r\n\r\nUsing a weight lifting exercise dataset from http://groupware.les.inf.puc-rio.br/har, this analysis attempts to predict the manner of activity (sitting, standing, walking, etc) using a variety of gyroscopes and acceleromters. Using Random Forest classification, we ultimately develop a model that has greater than 99% accuracy on a holdout set. \r\n\r\n# Analysis\r\n\r\nWe begin the analysis with some exploratory measures to understand the shape and size of the data. We find that there are 19,622 observations of 160 variables many of which do not have information (read NAs). \r\n\r\nOriginally, I removed the rows with NAs (using complete.cases()), but that left me with 30 rows and 160 variables - it did not bring me any closer to making an inference. I then explored removing the columns with NAs. Doing some high-level analysis of the NAs, we can determine that there is no pattern of NAs relative to the object we are classifying (eg, distribution of NA between \"classe\" A, B, C, D, or E).\r\n\r\nStripping the dataset of the variables with NAs, we were left with 93 variables. I originally attempted to run a Random Forest on this dataset and was surprised to find that R would not do an analysis on a set with greater than 53 dimensions. I was hoping I could determine which variables were most important and call it a day. :) Generally speaking, Random Forests have great predictive ability and are useful if we are not required to explain the logic embedded in the decision tree. (For example, healthcare applications might care about the path taken to a conclusion.)\r\n\r\nI played around a little with Principal Component Analysis (PCA, in the appendix) and realized I needed to build a correlation matrix to remove strongly associated dimensions and try to get below the 53 threshold. Correlation Matrices only work on numeric datasets, so I stripped the data again of its non-numeric dimensions. \r\n\r\n```{r1, echo=FALSE, results=FALSE}\r\nlibrary(\"caret\")\r\nlibrary(\"rpart\")\r\nlibrary(\"tree\")\r\nlibrary(\"randomForest\")\r\nlibrary(\"e1071\")\r\nlibrary(\"ggplot2\")\r\nlibrary(\"corrplot\")\r\nlibrary(\"nFactors\")\r\ndata <- read.csv(\"pmtraining.csv\", header = TRUE)\r\npredictor <- as.vector(data$classe)\r\n\r\ndata <- data[, apply(data, 2, function(x) !any(is.na(x)))] \r\n# training_clean <- training[complete.cases(training), ]\r\ndata <- data[sapply(data, is.numeric)]\r\n```\r\n\r\nThe Correlation Matrix can be found below. I tried to remove the labels for the different variables, but could not find the code online. If you have any thoughts or recommendations, I would greatly appreciate it! \r\n\r\nI developed a lost of the variables that had correlations greater than 0.8 and removed them from the data. I then added back the \"classe\" column, which is what we are trying to classify. You will notice that I removed the first 4 columns. This is the Index (\"X\") and other Timestamp data. When I first did the analysis, I found that I perfectly predicted all variables (Accuracy = 1). It turns out that the \"classe\" variable is listed in the dataset (all As, then all Bs, etc) - and the Index was being used to predict outcomes! \r\n\r\n```{r2, echo=TRUE}\r\nmatrix <- cor(data)\r\ncorrplot(matrix, type=\"upper\", order=\"hclust\", tl.col=\"black\", tl.srt=45, ann = FALSE)\r\n\r\nlist = findCorrelation(matrix, cutoff=0.8)\r\nlist = sort(list)\r\ndata = data[,-c(list)]\r\ndata = cbind(data, predictor)\r\ncolnames(data)[44] <- \"classe\"\r\ndata <- data[ , 5:44]\r\n```\r\n\r\nWe now have the data prepared to do some analysis. We set aside 25% of the data for a holdout, and develop a Random Forest model on the training set. Using the model to predict \"classe\" variables in the test set, we find that we have a 99.51% accuracy, and that the \"yaw_belt\", \"pitch_belt\", and \"pitch_forearm\" variables are most important.\r\n\r\nThis was then used on the test set for the exercise and provided 20/20 correct.\r\n\r\n```{r3, echo=TRUE}\r\n\r\nset.seed(1000)\r\ninTrain = createDataPartition(data$classe, p = 3/4)[[1]]\r\ntraining = data[ inTrain,]\r\ntesting = data[-inTrain,]\r\n\r\nfol <- formula(classe ~ .)\r\nmodel2 <- randomForest(fol, data = training)\r\nmodelresult2 <- predict(model2, testing, type = \"class\")\r\nconfusionMatrix(testing$classe, modelresult2)\r\nrfimp <- varImp(model2, scale = TRUE)\r\nrfimp\r\n```\r\n\r\n\r\n# APPENDIX\r\n\r\nIn doing this exercise, I learned a bit about PCA. It creates new variables from the dimensions, combining them to try and give predictive power to the variance. This is a Scree plot, which determines that there are 13 characteristics or PCA values, that together provide most of the explanatory power necessary for this analysis. \r\n\r\n```{r4, echo=TRUE}\r\n#remove the one we want to predict\r\nev <- eigen(cor(data[sapply(data, is.numeric)])) # get eigenvalues\r\nap <- parallel(subject=nrow(data[sapply(data, is.numeric)]),var=ncol(data[sapply(data, is.numeric)]),\r\n               rep=100,cent=.05)\r\nnS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)\r\nplotnScree(nS)\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}